import java.util.HashMap;
import java.util.Map;

class Solution {
    public int maximumSum(int[] nums) {
        Map<Integer, Integer> sumMap = new HashMap<>(); // Maps digit sum to the largest number
        int maxSum = -1; // Default return value if no valid pair is found

        for (int num : nums) {
            int digitSum = getDigitSum(num); // Compute sum of digits

            if (sumMap.containsKey(digitSum)) {
                // If a number with the same digit sum exists, update maxSum
                maxSum = Math.max(maxSum, sumMap.get(digitSum) + num);
                // Store the maximum number for this digit sum
                sumMap.put(digitSum, Math.max(sumMap.get(digitSum), num));
            } else {
                // Store the first occurrence of a digit sum
                sumMap.put(digitSum, num);
            }
        }
        return maxSum;
    }

    // Helper method to compute the sum of digits of a number
    private int getDigitSum(int num) {
        int sum = 0;
        while (num > 0) {
            sum += num % 10; // Extract last digit and add to sum
            num /= 10; // Remove last digit
        }
        return sum;
    }
}
