class Solution {
    public int subsetXORSum(int[] nums) {
        int sum = 0; // This will store the total XOR sum of all subsets
        int n = nums.length;
        int totalSubsets = 1 << n; // Total subsets = 2^n (using bit shift)

        // Loop through all subset masks from 0 to 2^n - 1
        for (int mask = 0; mask < totalSubsets; mask++) {
            int xor = 0; // XOR value for the current subset

            // Loop through each bit position (0 to n-1)
            for (int i = 0; i < n; i++) {
                // Check if the i-th bit in mask is set (i.e., include nums[i])
                if ((mask & (1 << i)) != 0) {
                    xor ^= nums[i]; // XOR the current number into the subset XOR
                }
            }

            sum += xor; // Add the XOR of this subset to the total sum
        }

        return sum; // Final result: sum of XORs of all subsets
    }
}
