class Solution {
    public List<Integer> lexicalOrder(int n) {
        // Initialize the current number to start at 1 (the first lexicographical number)
        int curr = 1;
        // Create a list to store the lexicographically ordered numbers
        List<Integer> ans = new ArrayList<>();
        
        // Loop through and generate n numbers in lexicographical order
        for (int i = 1; i <= n; i++) {
            // Add the current number to the result list
            ans.add(curr);
            
            // If the current number can be multiplied by 10 and still <= n, go deeper lexicographically
            // For example, 1 -> 10, 10 -> 100, etc.
            if (curr * 10 <= n) {
                curr = curr * 10;
            } else {
                // If multiplying by 10 exceeds n, we need to increment the number and adjust

                // While the last digit is 9 or the current number is equal to n, move up the tree
                // by dividing by 10. This prevents invalid numbers like 19 -> 20 -> 30 -> etc.
                while (curr % 10 == 9 || curr == n) {
                    curr = curr / 10;
                }
                
                // Increment to get the next lexicographical number
                curr += 1;
            }
        }
        
        // Return the list of numbers in lexicographical order
        return ans;
    }
}
