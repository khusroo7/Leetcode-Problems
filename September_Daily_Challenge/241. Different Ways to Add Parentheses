class Solution {
    public List<Integer> diffWaysToCompute(String expression) {
        // Initialize a list to store all the possible results
        List<Integer> ans = new ArrayList<>();
        
        // Loop through the expression to find operators
        for (int i = 0; i < expression.length(); i++) {
            char c = expression.charAt(i);
            
            // If the current character is an operator (+, -, or *), split the expression
            if (c == '+' || c == '-' || c == '*') {
                // Divide the expression into left and right parts based on the operator
                String left = expression.substring(0, i);
                String right = expression.substring(i + 1);
                
                // Recursively compute the possible results for the left and right sub-expressions
                List<Integer> leftAns = diffWaysToCompute(left);
                List<Integer> rightAns = diffWaysToCompute(right);
                
                // Combine the results from the left and right expressions based on the operator
                for (int x : leftAns) {
                    for (int y : rightAns) {
                        if (c == '+') {
                            ans.add(x + y);  // Add the results for '+'
                        } else if (c == '-') {
                            ans.add(x - y);  // Subtract the results for '-'
                        } else {
                            ans.add(x * y);  // Multiply the results for '*'
                        }
                    }
                }
            }
        }
        
        // If no operators were found, it means the expression is a single number
        // Parse it and add it to the result list
        if (ans.size() == 0) {
            ans.add(Integer.parseInt(expression));
        }
        
        // Return the list of possible results
        return ans;
    }
}
