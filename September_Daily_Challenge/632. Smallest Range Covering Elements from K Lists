import java.util.List;
import java.util.PriorityQueue;

public class Solution {  // Renamed from SmallestRange to Solution
    public int[] smallestRange(List<List<Integer>> nums) {
        // Priority queue to store {num, row index, column index} 
        PriorityQueue<int[]> minHeap = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        int max = Integer.MIN_VALUE;
        int rangeStart = 0, rangeEnd = Integer.MAX_VALUE;
        
        // Initialize the heap by pushing the first element from each list
        for (int i = 0; i < nums.size(); i++) {
            int num = nums.get(i).get(0);
            minHeap.offer(new int[] { num, i, 0 });
            max = Math.max(max, num); // Update max with the first element of each list
        }
        
        while (minHeap.size() == nums.size()) {
            int[] current = minHeap.poll();
            int min = current[0], row = current[1], col = current[2];
            
            // Update the smallest range if the current one is smaller
            if (max - min < rangeEnd - rangeStart) {
                rangeStart = min;
                rangeEnd = max;
            }
            
            // If there are more elements in the current row, add the next element to the heap
            if (col + 1 < nums.get(row).size()) {
                int nextVal = nums.get(row).get(col + 1);
                minHeap.offer(new int[] { nextVal, row, col + 1 });
                max = Math.max(max, nextVal); // Update the maximum value
            }
        }
        
        return new int[] { rangeStart, rangeEnd };
    }
}
