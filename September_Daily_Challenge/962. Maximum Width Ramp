class Solution {
    public int maxWidthRamp(int[] nums) {
        Stack<Integer> stack= new Stack<>();
        int maxWidth=0;

        // Step 1: Build a stack with decreasing elements and assign index to those elements
        for(int i=0;i<nums.length;i++){
            if(stack.isEmpty() || nums[stack.peek()] > nums[i]){
                stack.push(i); // it will insert only 6,0 elements only 
            }
        }

        // Step 2: Traverse from the right to maximize ramp width by doing j-i i.e j-stack.pop()
        for(int j=nums.length-1;j>=0;j--){
            while(!stack.isEmpty() && nums[stack.peek()] <= nums[j]){
                maxWidth=Math.max(maxWidth,j-stack.pop()); 
            }
        }
        return maxWidth;
    }
}
