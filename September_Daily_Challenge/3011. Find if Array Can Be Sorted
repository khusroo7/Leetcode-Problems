class Solution {
    public boolean canSortArray(int[] nums) {
        // Initialize variables:
        // max - holds the maximum value encountered so far in the array.
        // lastMax - holds the last known "max" value before a change in bit count.
        // bits - holds the count of '1' bits in the binary representation of the current max.
        int max = nums[0], lastMax = 0, bits = countBits(nums[0]);
        
        // Loop through each element in the array starting from the second element.
        for (int i = 1; i < nums.length; i++) {
            // Check if the bit count of the current number differs from 'max'.
            boolean bitChange = bits != countBits(nums[i]);
            
            // If there is a change in bit count, update 'lastMax' to the current 'max' value.
            if (bitChange) lastMax = max;
            
            // Update 'max' and 'bits' if the current number is less than 'lastMax'.
            // This essentially "resets" the max tracking to the new current number.
            if (nums[i] > max) {
                max = nums[i];
                bits = countBits(max); // Update bits to match the new max.
            }
            
            // If the current number is less than 'lastMax', it means sorting isn't possible.
            if (nums[i] < lastMax) return false;
        }
        
        // If we complete the loop without finding any unsortable condition, return true.
        return true;
    }
    
    // Helper method to count the number of '1' bits in the binary representation of 'n'.
    private int countBits(int n) {
        int count = 0;
        while (n > 0) {
            count += n & 1; // Increment count if the least significant bit is '1'.
            n = n >> 1;     // Right shift to check the next bit.
        }
        return count; // Return total count of '1' bits.
    }
}
